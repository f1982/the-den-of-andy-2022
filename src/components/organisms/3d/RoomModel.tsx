/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib/loaders/GLTFLoader';
import { MeshProps, useFrame } from 'react-three-fiber';

type GLTFResult = GLTF & {
  nodes: {
    mesh_all1_Texture1_0: THREE.Mesh;
  };
  materials: {};
};

const file = '/static/models/viking_room/scene.gltf';

export default function Model(props) {
  const ref = useRef<MeshProps>();
  const { nodes, materials } = useGLTF(file) as GLTFResult;

  // useFrame((state) => {
  //   const t = state.clock.getElapsedTime();
  //   ref.current.rotation.x = -Math.PI / 1.75 + Math.cos(t / 4) / 8;
  //   ref.current.rotation.y = Math.sin(t / 4) / 8;
  //   ref.current.rotation.z = (1 + Math.sin(t / 1.5)) / 20;
  //   ref.current.position.y = (1 + Math.sin(t / 1.5)) / 10;
  // });

  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        name="Room"
        castShadow
        receiveShadow
        geometry={nodes.mesh_all1_Texture1_0.geometry}
        material={nodes.mesh_all1_Texture1_0.material}
        position={[0, -0.3, 0]}
        rotation={[0.5, 150, 0.12]}
        scale={0.11}
      />
    </group>
  );
}
useGLTF.preload(file);
